@Library("my_library") _
pipeline {
    agent any
    stages {
        stage('checkout') {
            steps {
                script {
                    echo "Checking out code from Git repository"
                    def config = [
                        url: 'https://github.com/AdidelaHarishReddy/myProject.git',
                        credentialsId: 'git-hub_token',
                        branch: 'main'
                    ]
                    gitcheckout(config)
                    sh '''
                        ls -a
                    '''
                }
            }
        }
        stage('code quality checking') {
                steps {
                    script {
                        withSonarQubeEnv('sonarserver') {
                            echo "code quality checking the project"
                            sh '''
                                sonar-scanner 
                                #-Dsonar.projectKey=my_project
                                # sonar-scanner.
                                # --sonar-project-key=my_project
                            '''
                        }
                    }
                }
        }
        stage('check quality gate result') {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        echo "Checking quality gate result"
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('trivy fs scan') {
            steps {
                script {
                    echo "Running Trivy fs scan"
                    sh '''
                        wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
                        trivy fs . --format template --template "@html.tpl" --severity HIGH,CRITICAL -o trivy_report.html
                    '''
                    publishHTML (target : [allowMissing: false,
                                 alwaysLinkToLastBuild: true,
                                 keepAll: true,
                                 reportDir: './',
                                 reportFiles: 'trivy_report.html',
                                 reportName: 'trivy vulnerability fs report',
                                 reportTitles: 'The fs Report'])
                }
            }
        }
        stage('docker build frontend') {
            environment {
                DOCKER_CREDENTIALS_ID = 'dockerhub_credentials'
                IMAGE_NAME = 'harishreddy1234/frontend'
                DOCKER_IMAGE_TAG = 'latest'
                DOCKERFILE_SRC = 'frontend/Dockerfile'
            }
            steps {
                script {
                    echo "Building Docker image for frontend"
                         docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                             frontend_image = docker.build("${IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "-f ${DOCKERFILE_SRC} ./frontend/")
                             sh """
                                 trivy image --format template --template "@html.tpl" --severity HIGH,CRITICAL ${IMAGE_NAME}:${DOCKER_IMAGE_TAG} -o trivy_frontend_image_report.html
                             """
                             publishHTML (target : [allowMissing: false,
                                     alwaysLinkToLastBuild: true,
                                     keepAll: true,
                                     reportDir: './',
                                     reportFiles: 'trivy_frontend_image_report.html',
                                     reportName: 'trivy frontend image vulnerability report',
                                     reportTitles: 'The frontend image Report'])
                             frontend_image.push()
                        }
                }
            }
        }    
        stage('docker build backend') {
            environment {
                DOCKER_CREDENTIALS_ID = 'dockerhub_credentials'
                BACKEND_IMAGE_NAME = 'harishreddy1234/backend'
                DOCKER_IMAGE_TAG = 'latest'
                BACKEND_DOCKERFILE_SRC = 'backend/Dockerfile'
            }
            steps {
                script {
                    echo "Building Docker image for backend"
                         docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                             backend_image = docker.build("${BACKEND_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "-f ${BACKEND_DOCKERFILE_SRC} ./backend/")
                             sh """
                                 trivy image --format template --template "@html.tpl" --severity HIGH,CRITICAL ${BACKEND_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -o trivy_backend_image_report.html
                             """
                             publishHTML (target : [allowMissing: false,
                                     alwaysLinkToLastBuild: true,
                                     keepAll: true,
                                     reportDir: './',
                                     reportFiles: 'trivy_backend_image_report.html',
                                     reportName: 'trivy backend image vulnerability report',
                                     reportTitles: 'The backend image Report'])
                             backend_image.push()
                        }
                }
            }
        }

    }
   post {
        always {
                cleanWs()
            }
        }
}
